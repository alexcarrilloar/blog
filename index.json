[{"categories":null,"content":"Someone asked me: “Hey, can you accept my pull request? And if possible… could you travel back in time so the average resolution time doesn’t go up?” I laughed. But deep down, I knew I’d heard versions of that line way too many times lately. Somewhere along the way, we confused metrics with meaning. There’s this phrase floating around in the IT world: “You can’t improve what you can’t measure.” And sure, it has its place. It helps us stay grounded, know where we are, and track progress. But I’ve been thinking more about Aristotle lately, specifically his idea of virtue being the balance between extremes. Not too little, not too much. Just right. (Thanks Mateus, Mindshop really helps). 💡 That’s when we fall into vanity metrics those slick, surface-level stats that feel good on a dashboard but don’t tell the full story. Like celebrating a PR merge time of 30 seconds without asking if anyone even read it. And let’s not forget the all-time favorite: lines of code written. Too few? Not productive, too many? Overengineering. So what’s the “right” number? Maybe… zero. (Plot twist: what if I just cram the whole logic in a single line and call it a day?) Or the opposite, lots of blank lines, one variable declared per line. Done, I’ve “improved” my output. 😌 This is where vanity metrics sneak in the kind of numbers that look good on dashboards but don’t actually reflect the health, impact, or quality of the work. These metrics are easy to game, tempting to track, and dangerously misleading if we start basing decisions or evaluations on them. Because let’s be honest: developers will do whatever it takes to “win” the metric, especially when the metric becomes the goal. “Play stupid games, win stupid prizes.” And I’ve lived it. I’ve seen teams so focused on stats that they forgot what they were building. Engineers more worried about keeping their PR review time under 1 hour than giving thoughtful feedback. That’s how we lose sight of the outcome, the actual impact on users, on the business, on each other. And speaking of outcomes, let me bring in a personal favorite: Valorant. 🎮 It’s a tactical shooter where everyone obsesses over their KDA (Kills/Deaths/Assists). But here’s the thing: you can have a great KDA and still lose the game if you ignore the objective. I’ve seen players with perfect stats camping in the corner like it’s their home, while the rest of the team is screaming: “Enter to the site!” That’s what vanity metrics do, they turn talented people into campers, focused on the stats, not about winning the game. 🏆 Before you find yourself hovering over a pull request just to keep the chart looking green, or skipping a conversation because it might slow down the sprint velocity, take a breath; Metrics aren’t the enemy, but when we start performing for them instead of learning from them, we trade depth for decoration. Because real progress doesn’t always fit in a graph. Sometimes it looks like a tough review, a refactor no one asked for, or a moment spent mentoring instead of merging. In the end, a perfect dashboard means nothing if it comes at the cost of purpose, no one wins a game just by looking good on paper, not in Valorant, and definitely not in software. ","date":"2025-05-05","objectID":"/blog/posts/vanitymetrics/:0:0","tags":["leadership","soft-skills"],"title":"Vanity Metrics: The KDA of Developers","uri":"/blog/posts/vanitymetrics/"},{"categories":null,"content":"The other day, I was chatting with a friend who’s a Product Manager, and she recommended me the book “What Got You Here Won’t Get You There” by Marshall Goldsmith, and one idea that really stuck with me was the concept of “Adding Too Much Value.” It hit close to home because I’ve been there, and that idea has seriously shaped the way I work on a team. When I was a junior engineer, I struggled with ownership. Even if I was technically assigned to a task, it rarely felt like it was mine. Any idea I had would usually get polished or replaced before it could take real form. The intention behind that feedback was good, to deliver the best possible result ✨, but the side effect? I never really built confidence in my own voice or felt the full weight of responsibility. It’s tough to feel accountable for something you didn’t really build. And even harder to care deeply about it when you didn’t have space to shape it. That’s how well-intentioned advice or improvement suggestions can, without meaning to, silence emerging talent. 🤐 Now that I’ve gained more experience, I’ve caught myself falling into that same trap, jumping in too soon, offering advice before it’s needed, trying to “add value” at every turn. It’s easy to think you’re helping by offering best practices or a faster solution. After all, results matter. As one of my former managers used to say, “De aquí sale para comer\" — (Work allows me to eat). But here’s the catch: even a small suggestion, meant to improve the outcome by just 5%, can chip away at someone’s motivation and sense of ownership. I’ve started calling this behavior “zomvalue” or “zombies of value” like zombies🧟‍♂️, it’s a relentless pursuit of value delivery without stopping to ask: at what cost? These are the moments when team harmony gets overshadowed by the pressure to contribute, to optimize, to “make it better” regardless of who might get left behind in the process. This isn’t about never sharing ideas or staying silent when improvements matter. It’s about reading the room. About asking yourself if your comment, no matter how helpful, might shrink someone else’s sense of ownership. One of the biggest takeaways from the book wasn’t about doing more good, but simply: stop being a jerk. It’s not always about stepping up, sometimes, it’s about stepping back and letting others step forward. So the next time someone shares an idea they’re excited about, or a feature they want to take on, pause. Ask yourself: Is this a moment to teach, or a moment to support? Will my input help them grow, or just prove that I was right? ","date":"2025-04-24","objectID":"/blog/posts/zombiesofvalue/:0:0","tags":["leadership","soft-skills"],"title":"Zombies of Value: How Good Intentions Kills Ownership","uri":"/blog/posts/zombiesofvalue/"},{"categories":null,"content":"Throughout my career as a Software Engineer, I’ve had the chance to face a wide range of software errors, from isolated cases to full system failures. It’s fascinating to observe how different people take different paths to reach the same destination: the root cause. But I want to talk about a behavior that, unfortunately, I see repeating itself over and over again when trying to find “the needle in the haystack.” In a collaborative work environment, it’s common for team members to approach you for help with a problem that has been unresolved for hours, days, or even weeks. ⏳ Once you start reviewing the code or the process in search of the error, you find different responses when asking key questions about the problem. The most common one (at least in my case) is: “That can’t be possible” 😠, and the times when that statement was wrong are far more frequent than the times it was true, which leads me to believe that at this point, a high level of stress or desperation was reached, often due to a trial-and-error approach. I believe that approach to problem-solving only adds unnecessary stress, making options seem limited. My takeaway is that you don’t need to reinvent the wheel. Although everyone follows their own experiences, it is possible to learn new ways of approaching even the most basic topics, such as troubleshooting. For example, learning about Systematic Debugging. In the end, I always remind myself that what happens is not magic, but a set of variables that lead to a specific result. Having patience and open-mindedness when solving problems is not only crucial, but it can also help you reach a higher level of collaboration and effectiveness within the team. And no, it’s not about confronting the person who wrote the code or the code itself; In the end, it’s just about figuring things out and fixing the problem, nothing else. ","date":"2025-03-20","objectID":"/blog/posts/yesitispossible/:0:0","tags":["leadership","soft-skills"],"title":"Yes, it is possible","uri":"/blog/posts/yesitispossible/"}]